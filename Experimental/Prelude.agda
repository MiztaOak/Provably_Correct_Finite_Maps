open import Level renaming (suc to s; zero to z)
module Prelude where

private
  variable
    ‚Ñì l : Level

-- Natural numbers as our first example of
-- an inductive data type.

data Nat : Set where
  zero : Nat 
  suc  : (n : Nat) ‚Üí Nat 

-- To use decimal notation for numerals, like
-- 2 instead of (suc (suc zero)), connect it
-- to the built-in natural numbers.

{-# BUILTIN NATURAL Nat #-}

-- Lists are a parameterized inductive data type.

data List (A : Set ‚Ñì) : Set ‚Ñì where
  nil  : List A
  cons : (x : A) (xs : List A) ‚Üí List A

-- Disjoint sum type.

data _‚äé_ (S : Set l) (T : Set ‚Ñì) : Set (s (l ‚äî ‚Ñì)) where
  inl : S ‚Üí S ‚äé T
  inr : T ‚Üí S ‚äé T
infixr 4 _‚äé_

-- The empty sum is the type with 0 alternatives,
-- which is the empty type.
-- By the Curry-Howard-Isomorphism,
-- which views a proposition as the set/type of its proofs,
-- it is also the absurd proposition.

data False : Set where

-- Tuple types

-- The generic record type with two fields
-- where the type of the second depends on the value of the first
-- is called Sigma-type (or dependent sum), in analogy to
--
--   Œ£ ‚Ñï A =  Œ£   A(n) = A(0) + A(1) + ...
--           n ‚àà ‚Ñï

record Œ£ (S : Set l) (T : S ‚Üí Set ‚Ñì) : Set (l ‚äî ‚Ñì) where
  constructor _,_
  field fst : S
        snd : T fst
open Œ£ public

infixr 5 _,_

-- The non-dependent version is the ordinary Cartesian product.

_√ó_ : (S : Set l) (T : Set ‚Ñì) ‚Üí Set (l ‚äî ‚Ñì)
S √ó T = Œ£ S Œª _ ‚Üí T

infixr 5 _√ó_

-- The record type with no fields has exactly one inhabitant
-- namely the empty tuple record{}
-- By Curry-Howard, it corresponds to Truth, as
-- no evidence is needed to construct this proposition.

record True : Set ‚Ñì where
  constructor tt

-- Relations

-- Type-theoretically, the type of relations ùìü(A√óA) is
--
--   A √ó A ‚Üí Prop
--
-- which is
--
--   A √ó A ‚Üí Set
--
-- by the Curry-Howard-Isomorphism.

Rel : Set ‚Üí Set‚ÇÅ
Rel A = A ‚Üí A ‚Üí Set

-- Less-or-equal on natural numbers

LE‚Ñï : Rel Nat 
LE‚Ñï zero  y     = True
LE‚Ñï (suc x) zero  = False
LE‚Ñï (suc x) (suc y) = LE‚Ñï x y 

‚â∫‚Ñï : Rel Nat
‚â∫‚Ñï zero zero = False
‚â∫‚Ñï zero (suc y) = True 
‚â∫‚Ñï (suc x) zero = False
‚â∫‚Ñï (suc x) (suc y) = ‚â∫‚Ñï x y

data _‚â°_ {A : Set ‚Ñì} (x : A) : A ‚Üí Set ‚Ñì where
  refl : x ‚â° x

-- C-c C-l load
-- C-c C-c case split
-- C-c C-, show goal and assumptions
-- C-c C-. show goal and assumptions and current term
-- C-c C-SPC give

record ‚åú_‚åù (P : Set ‚Ñì) : Set ‚Ñì where
  constructor !
  field {{prf}} : P

-- Extension by a least and a greatest element

data Ext (A : Set ‚Ñì) : Set ‚Ñì where
  ‚ä§ : Ext A
  # : A ‚Üí Ext A
  ‚ä• : Ext A
